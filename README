# PDFMake Template Builder

A modern, intuitive web application for creating and customizing PDFMake templates through a visual drag-and-drop interface. **Bridging the gap between visual design expectations and pdfMake's document flow architecture.**

## 🎯 Mission Statement

To provide a user-friendly visual interface for pdfMake template creation while respecting the underlying document flow paradigm, enabling both novice and experienced users to create professional PDF templates efficiently.

## 🎯 Core Objectives

### 🎨 **Architectural Challenge: Visual-to-Flow Translation**
The primary challenge is bridging user expectations for absolute positioning with pdfMake's document flow paradigm:

- **Visual Interface**: Users expect drag-and-drop absolute positioning (like CSS/HTML)
- **pdfMake Reality**: Uses document flow (like Word/LaTeX) with flow, columns, and tables
- **Our Solution**: Smart layout intent detection with automatic conversion between layout types

### 🚀 **Progressive Layout Approach**
We implement layouts in phases of increasing complexity:

1. **Flow Layout** - Simple top-to-bottom elements (Phase 1)
2. **Column Layout** - Side-by-side elements using pdfMake columns (Phase 2)
3. **Table Layout** - Grid-based layouts using table structures (Phase 3)
4. **Hybrid Layout** - Mixed approaches for complex designs (Phase 4)

## 🎯 Features

### Core Functionality
- **Smart Drag & Drop** - Layout-aware drag-and-drop with intent detection
- **Visual Abstraction Layer** - WYSIWYG canvas that translates to pdfMake structures
- **Element Types** - Text, tables, images, lists, columns, and page breaks
- **Real-time Customization** - Live property editing with immediate visual feedback
- **PDF Preview** - Instant preview with real-time docDefinition synchronization
- **Template Management** - Save, load, import, and export templates as JSON
- **Image Upload** - Drag-and-drop with automatic base64 conversion
- **Layout Conversion** - Automatic conversion between flow, column, and table layouts

### User Experience
- **Responsive Design** - Works seamlessly on desktop, tablet, and mobile
- **Dark Mode** - Automatic system preference detection with manual override
- **Keyboard Shortcuts** - Efficient navigation and actions
- **Help System** - Interactive tutorials, contextual tooltips, and help panels
- **Confirmation Dialogs** - Smart dialogs for destructive actions and layout changes
- **Example Templates** - Pre-loaded examples from pdfMake documentation
- **Error Recovery** - Graceful handling with conversion suggestions

### Technical Excellence
- **Client-Side Only** - No backend required, works entirely in browser
- **Local Storage** - Templates saved locally with export/import options
- **Modern Stack** - Next.js 15+, TypeScript, Tailwind CSS, @shadcn/ui, Bun
- **Performance Optimized** - Virtual scrolling, memoization, and lazy loading
- **Layout Intelligence** - AI-powered layout intent detection and conversion
- **Vercel Ready** - Optimized for Vercel deployment

## 🚀 Quick Start

```bash
# Install dependencies
bun install

# Set up @shadcn/ui
bunx shadcn@latest init --yes

# Start development server
bun dev

# Open http://localhost:3000
```

## 📋 Requirements & Implementation Approach

### ✅ **Core Requirements Met**

**Visual Interface & User Experience**
- ✅ **Intuitive UI** - Modern drag-and-drop interface with layout-aware feedback
- ✅ **Local Operation** - 100% client-side with localStorage persistence
- ✅ **Element Addition** - Smart element palette with flow-aware placement
- ✅ **Customization** - Comprehensive properties panel for all elements
- ✅ **Image Upload** - Drag-and-drop with automatic base64 conversion
- ✅ **Download/Export** - JSON export with copy-to-clipboard functionality
- ✅ **PDF Preview** - Real-time preview with docDefinition synchronization
- ✅ **Import/Paste** - JSON import with template validation
- ✅ **Example Templates** - Pre-loaded examples from pdfMake documentation
- ✅ **Help System** - Interactive tutorials and contextual guidance

**Technical Excellence**
- ✅ **Tech Stack** - TypeScript, Next.js 15+, Bun, Vercel deployment ready
- ✅ **Error Handling** - User-friendly messages with layout conversion suggestions
- ✅ **Performance** - Optimized rendering with virtual scrolling and memoization

### 🎯 **Key Architectural Achievements**

**Layout Intelligence**
- ✅ **Flow-to-Visual Translation** - WYSIWYG canvas that respects pdfMake constraints
- ✅ **Layout Intent Detection** - Smart interpretation of user drag gestures
- ✅ **Automatic Conversion** - Seamless transitions between layout types
- ✅ **Error Recovery** - Graceful handling of layout incompatibilities

**Progressive Complexity**
- ✅ **Phase 1 (Flow)** - Basic document flow layout
- ✅ **Phase 2 (Columns)** - Side-by-side element layout
- ✅ **Phase 3 (Tables)** - Grid-based positioning
- ✅ **Phase 4 (Hybrid)** - Complex layout combinations

**User Experience Excellence**
- ✅ **Visual Abstraction** - Users see drag-and-drop, system handles pdfMake complexity
- ✅ **Smart Suggestions** - Helpful conversion alternatives when layouts conflict
- ✅ **Educational Value** - Users learn pdfMake concepts through visual interaction

## 📁 Project Structure

```
pdfmake-builder/
├── src/
│   ├── app/                 # Next.js app router pages
│   ├── components/          # React components
│   │   ├── ui/              # Reusable UI components (@shadcn/ui)
│   │   ├── elements/        # Template element components
│   │   ├── canvas/          # Visual canvas abstraction layer
│   │   ├── drag-drop/       # Layout-aware drag and drop system
│   │   ├── layout/          # Layout conversion and intent detection
│   │   ├── preview/         # PDF preview and docDefinition sync
│   │   ├── help/            # Interactive help and tutorial system
│   │   └── dialogs/         # Confirmation and error dialog system
│   ├── services/           # Business logic and utilities
│   │   ├── layout-engine/   # Core layout conversion algorithms
│   │   ├── pdf-generator/   # pdfMake integration and error handling
│   │   ├── template-manager/ # Save/load/export functionality
│   │   └── validation/      # Layout validation and error recovery
│   ├── types/              # TypeScript type definitions
│   │   ├── elements.ts      # Element type definitions
│   │   ├── layout.ts        # Layout and positioning types
│   │   ├── pdfmake.ts       # pdfMake type mappings
│   │   └── state.ts         # Application state types
│   ├── lib/                # External library configurations
│   │   ├── pdfmake.ts       # pdfMake setup and utilities
│   │   └── shadcn.ts        # @shadcn/ui configuration
│   └── utils/              # Utility functions
│       ├── layout-helpers/  # Layout calculation utilities
│       ├── drag-helpers/    # Drag and drop utilities
│       └── pdf-helpers/     # pdfMake helper functions
├── docs/                   # Documentation and examples
│   ├── plan/               # Development planning and specifications
│   ├── examples/           # pdfMake example templates
│   └── docs.md             # pdfMake library documentation
└── public/                 # Static assets
```

## 🛠️ Development

### Prerequisites
- Node.js 18+
- Bun (recommended) or npm

### Available Scripts
```bash
bun dev          # Start development server
bun build        # Build for production
bun start        # Start production server
bun lint         # Run ESLint
bun type-check   # Run TypeScript checking
```

### Environment Variables
```env
NEXT_PUBLIC_APP_NAME=PDFMake Template Builder
NEXT_PUBLIC_VERSION=1.0.0
```

## 🏗️ Architectural Approach

### The Core Challenge
pdfMake Template Builder solves a fundamental paradigm mismatch:

**User Expectations**: Absolute positioning drag-and-drop (like Canva or Figma)
**pdfMake Reality**: Document flow layout (like Microsoft Word or LaTeX)

### Our Solution: Smart Layout Intelligence

1. **Visual Abstraction Layer** - Users see intuitive drag-and-drop
2. **Layout Intent Detection** - System interprets user gestures intelligently
3. **Automatic Conversion** - Seamlessly translates between layout types
4. **Progressive Complexity** - Starts simple, adds advanced features gradually

### Key Innovations

- **Flow-to-Visual Translation**: WYSIWYG canvas that respects pdfMake constraints
- **Layout Compatibility Engine**: Validates and converts between layout paradigms
- **Smart Error Recovery**: Suggests alternatives when layouts conflict
- **Educational Interface**: Users learn pdfMake concepts through visual interaction

## 📚 Documentation

See the `docs/` folder for comprehensive documentation:
- `docs/plan/` - Development planning and specifications
  - `logic-spec.md` - System architecture and data flow
  - `technical-spec.md` - Technical implementation details
  - `ui-spec.md` - User interface design specifications
  - `development-plan.md` - Milestone-based development roadmap
- `docs/examples/` - pdfMake example templates (tables, styles, columns, etc.)
- `docs/docs.md` - Complete pdfMake library documentation

## 🎨 Design System

Built with a modern design system featuring:
- Consistent color palette and typography
- Responsive grid system
- Micro-interactions and smooth animations
- Dark/light mode support
- Accessible component library

## 🔧 Customization

The application is designed for extensibility while respecting pdfMake's architectural constraints:

**Theme System**
- **Light/Dark Mode** - Automatic system preference detection
- **Custom Themes** - Easy color scheme customization
- **Component Styling** - Tailwind CSS-based theming system

**Element Types**
- **Core Elements** - Text, tables, images, lists, columns (pdfMake native)
- **Layout Elements** - Flow, column, table containers
- **Custom Elements** - Extensible system for new pdfMake-compatible elements

**Layout Intelligence**
- **Conversion Rules** - Customizable layout conversion algorithms
- **Validation Rules** - Configurable layout compatibility checks
- **Error Messages** - Customizable error handling and suggestions

**User Experience**
- **Keyboard Shortcuts** - Fully customizable hotkey system
- **Help Content** - Extensible tutorial and help system
- **Language Support** - Internationalization ready

## 📄 License

MIT License - see LICENSE file for details.

## 🎯 Unique Value Proposition

### What Makes This Different

**Most PDF Builders** focus on visual design tools that generate their own PDF engines, often with limited customization and export options.

**pdfMake Template Builder** provides:
- **True pdfMake Integration** - Direct compatibility with pdfMake's powerful templating system
- **Educational Value** - Users learn pdfMake concepts through visual interaction
- **Code Export** - Generate actual pdfMake JavaScript code, not black-box PDFs
- **Open Source Freedom** - No vendor lock-in, full control over generated templates
- **Extensibility** - Leverage pdfMake's rich ecosystem and community resources

### Use Cases

**For Developers**
- Rapid prototyping of PDF templates
- Learning pdfMake through visual exploration
- Generating pdfMake code snippets for applications

**For Business Users**
- Creating professional PDF templates without coding
- Customizing existing pdfMake templates visually
- Generating reusable PDF templates for applications

**For Educators**
- Teaching PDF generation concepts visually
- Demonstrating document layout principles
- Learning pdfMake library through interactive examples

## 🤝 Contributing

We welcome contributions! This project solves a unique architectural challenge and there's plenty of room for improvement.

### Getting Started
1. Read our comprehensive documentation in `docs/plan/`
2. Understand the visual-to-pdfMake mapping challenge
3. Fork the repository and create a feature branch
4. Make your changes following our architectural patterns
5. Add tests for layout conversion logic
6. Submit a pull request

### Areas for Contribution
- **Layout Algorithms** - Improve layout intent detection and conversion
- **UI/UX** - Enhance the visual abstraction layer
- **Element Types** - Add support for more pdfMake elements
- **Internationalization** - Add language support
- **Accessibility** - Improve screen reader support and keyboard navigation

## 📞 Support

**Documentation First**: Check our comprehensive docs in the `docs/` folder:
- `docs/plan/` for development and architectural details
- `docs/examples/` for pdfMake usage patterns
- `docs/docs.md` for complete pdfMake reference

**Community Support**:
- Open an issue on GitHub for bugs or feature requests
- Join discussions about pdfMake integration challenges
- Share your layout conversion algorithms and approaches

---

**Built with ❤️ to bridge the gap between visual design and document flow paradigms**